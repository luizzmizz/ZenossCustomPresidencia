<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:local="*" xmlns:fc="http://www.adobe.com/2006/fc"
	 layout="absolute"
	 creationComplete="setup()" backgroundGradientColors="[#ffffff,#ffffff]">
	
	<fc:Roamer id="roamer" bottom="0" 
		itemRenderer="XMLItemView"
		repulsionFactor="{repulsion.value}" 
		maxDistanceFromCurrent="{maxDistanceFromCurrent.value + 1}" 
		itemLimit="200"
		autoFit="{autoFit.selected}"
        tidyHistory="true"
		motionThreshold="0.3"
		right="0" left="0" top="0">

		<fc:removeItemEffect>
			<mx:Fade alphaFrom="1" alphaTo="0" duration="500"/>				
		</fc:removeItemEffect>
		
		<fc:addItemEffect>
			<mx:Fade alphaFrom="0" alphaTo="1" duration="500"/>
		</fc:addItemEffect>
	</fc:Roamer>
    <mx:HBox x="0" y="0" backgroundAlpha="0.8" width="100%"
        backgroundColor="0x444444" verticalAlign="top" 
        paddingTop="5" paddingLeft="5" paddingRight="5"
        paddingBottom="0"
        horizontalAlign="left">
    <mx:VBox horizontalAlign="left"
        paddingBottom="3" paddingRight="10" >
    <mx:Label text="Selected Device or Network" fontSize="9" textAlign="center"
        color="#ffffff" height="15"/>
    <mx:TextInput enter="refreshData();" id="objidsearch" fontSize="9"
        height="21" text="{_nextItemName?_nextItemName:_startingObject}" width="150"/>
    <mx:LinkButton label="Go to Status Page" height="15" id="gotobutton"
                   fontSize="9" click="goToStatusPage()"/>
    </mx:VBox>
    <mx:VBox horizontalAlign="left"
        paddingBottom="3" paddingRight="10" >
    <mx:Label text="Device Class Filter" fontSize="9" textAlign="center"
        color="#ffffff" height="15"/>
    <mx:ComboBox dataProvider="{getDeviceClasses()}" fontSize="9" height="20"
        width="170" enter="refreshData();"
        close="_selectedClass=ComboBox(event.target).selectedItem.data"/>
    <mx:HBox paddingLeft="5">
	<mx:CheckBox selected="false" id="autoFit" label="Fit to window"
    color="#ffffff" change="roamer.refresh()"/>
    </mx:HBox>
    </mx:VBox>
    <mx:VBox paddingTop="15">
	<mx:Button id="fromSmallDataButton" label="Refresh" height="30"
		click="refreshData();" width="70" fontSize="9"/>
    </mx:VBox>
    <mx:Spacer width="100%"/>
    <mx:HBox paddingTop="10">
    <mx:VBox horizontalAlign="center">
	<mx:HSlider width="100" id="maxDistanceFromCurrent"
        value="2" minimum="1" maximum="4" 
		liveDragging="true" snapInterval="1"/>
	<mx:Label text="Number of Hops" fontSize="9" 
              textAlign="center" color="#ffffff"/>
    </mx:VBox>
    <mx:VBox horizontalAlign="center">
	<mx:HSlider width="100" id="repulsion" value="{roamer.repulsionFactor}" minimum="0.01" maximum="1.0" liveDragging="true"/>
	<mx:Label text="Repulsion" fontSize="9" width="100" textAlign="center"
    color="#ffffff"/>
    </mx:VBox>
    </mx:HBox>
    </mx:HBox>

	<mx:HTTPService id="initialData"
        url="/zport/dmd/getXMLEdges"
        showBusyCursor="true" resultFormat="e4x" 
        fault="badHTTPRequest();"
        result="gotData(['Node','Edge','fromID','toID'], event)">
        <mx:request>
            <objid>{objidsearch.text?objidsearch.text:_nextItemName}</objid>
            <depth>{maxDistanceFromCurrent.value}</depth>
            <filter>{_selectedClass}</filter>
        </mx:request>
    </mx:HTTPService>
	<mx:HTTPService id="moreData" url="/zport/dmd/getXMLEdges"
        showBusyCursor="true" resultFormat="e4x" 
        fault="badHTTPRequest();"
        result="updateData(event)">
        <mx:request>
            <depth>{maxDistanceFromCurrent.value}</depth>
            <objid>{_nextItemName}</objid>
            <filter>{_selectedClass}</filter>
        </mx:request>
    </mx:HTTPService>
	
	<mx:Script>
		<![CDATA[
			import com.adobe.flex.extras.controls.springgraph.SpringGraph;
			import mx.rpc.events.ResultEvent;
            import mx.collections.XMLListCollection;
			import com.adobe.flex.extras.controls.springgraph.Item;
			import com.adobe.flex.extras.controls.springgraph.Graph;
            import flash.external.ExternalInterface;


            [Bindable]private var _nextItemName:String;
            [Bindable]private var _nodeList:XML;
            [Bindable]private var _history:Array;
            [Bindable]private var _isFullScreen:Boolean = false;
            [Bindable]private var _selectedClass:String;
            [Bindable]private var _startingObject:String = getInitialObject();

			private function setup(): void {
				initialData.send();
                roamer.motionThreshold = 0.3;
				roamer.repulsionFactor = 0.5;
				roamer.showHistory = true;
			}
			
			private function gotData(xmlNames: Array, event: ResultEvent): void {
				roamer.resetHistory();
				roamer.resetShowHide();
				roamer.xmlNames = xmlNames;
                _nodeList = XML(event.result);
                //log(_nodeList.toXMLString());
                var startobj:String = _nodeList.Start.@name;
                //log(startobj);
                _nodeList.replace('Start', "");
                //roamer.dataProvider = _nodeList;
                roamer.setDataProvider(_nodeList, startobj);
                if (roamer.currentItem)
                    objidsearch.text = roamer.currentItem.data.@prop;
			}

            private function refreshData(): void {
                initialData.send();
            }

			private function updateData(event: ResultEvent): void {
                var mylist:XMLList = XMLList(event.result);
                var startobj:String = mylist.Start.@name;
                var nodelist:XMLList = mylist.Node;
                var edgelist:XMLList = mylist.Edge;
                for each (var item:XML in nodelist) {
                    var id:String = item.@id;
                    if (roamer.dataProvider.find(id)==null) {
                        _nodeList.appendChild(item);
                    }
                };
                for each (var edge:XML in edgelist) {
                    _nodeList.appendChild(edge);
                };
                roamer.setDataProvider(_nodeList, startobj);
                objidsearch.text = roamer.currentItem.data.@prop;
			}

            private function badHTTPRequest(): void {
    
            }
			
			public function itemDoubleClick(event: Event): void {
                if (roamer.dataProvider.numLinks(event.currentTarget.data)<=1) {
                    _nextItemName = event.currentTarget.data.data.@prop;
                    moreData.send()
                } else {
                    roamer.currentItem = event.currentTarget.data;
                    objidsearch.text = event.currentTarget.data.data.@prop;
                }
			}

            public function getDeviceClasses(): Array {
                var result:Array = [{data:"/",label:"/"}];
                if (ExternalInterface.available) {
                    result = ExternalInterface.call("getDevClassList");
                }
                return result;
            }
            public function getInitialObject(): String {
                var initobj:String = ExternalInterface.call("getInitialObjId");
                if (initobj.length<1) {
                    initobj = '192.168.1.0';
                }
                _nextItemName = initobj;
                return initobj;
            }
            public function toggleFullScreenMode(): void {
                if (ExternalInterface.available) {
                    var x:String = ExternalInterface.call("toggleFullScreen");
                }
            }

            /* Access MochiKit's own console log function */
            public function log(msg:String): void {
                if (ExternalInterface.available) {
                    ExternalInterface.call("log", msg);
                }
            }

            public function goToStatusPage(): void {
                if (objidsearch.text) {
                    if (ExternalInterface.available) {
                        ExternalInterface.call("goToDeviceSearch", objidsearch.text);
                    }
                }
            }

		

		]]>
	</mx:Script>
</mx:Application>
